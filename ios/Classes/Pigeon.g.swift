// Autogenerated from Pigeon (v22.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct LngLat {
  var lng: Double
  var lat: Double



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> LngLat? {
    let lng = pigeonVar_list[0] as! Double
    let lat = pigeonVar_list[1] as! Double

    return LngLat(
      lng: lng,
      lat: lat
    )
  }
  func toList() -> [Any?] {
    return [
      lng,
      lat,
    ]
  }
}

private class PigeonPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return LngLat.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PigeonPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? LngLat {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PigeonPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PigeonPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PigeonPigeonCodecWriter(data: data)
  }
}

class PigeonPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PigeonPigeonCodec(readerWriter: PigeonPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MapLibrePigeon {
  func jumpTo(center: LngLat, zoom: Double?, bearing: Double?, pitch: Double?, completion: @escaping (Result<Void, Error>) -> Void)
  func flyTo(center: LngLat, zoom: Double?, bearing: Double?, pitch: Double?, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MapLibrePigeonSetup {
  static var codec: FlutterStandardMessageCodec { PigeonPigeonCodec.shared }
  /// Sets up an instance of `MapLibrePigeon` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MapLibrePigeon?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let jumpToChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.maplibre.MapLibrePigeon.jumpTo\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      jumpToChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let centerArg = args[0] as! LngLat
        let zoomArg: Double? = nilOrValue(args[1])
        let bearingArg: Double? = nilOrValue(args[2])
        let pitchArg: Double? = nilOrValue(args[3])
        api.jumpTo(center: centerArg, zoom: zoomArg, bearing: bearingArg, pitch: pitchArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      jumpToChannel.setMessageHandler(nil)
    }
    let flyToChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.maplibre.MapLibrePigeon.flyTo\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      flyToChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let centerArg = args[0] as! LngLat
        let zoomArg: Double? = nilOrValue(args[1])
        let bearingArg: Double? = nilOrValue(args[2])
        let pitchArg: Double? = nilOrValue(args[3])
        api.flyTo(center: centerArg, zoom: zoomArg, bearing: bearingArg, pitch: pitchArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      flyToChannel.setMessageHandler(nil)
    }
  }
}
