// Autogenerated from Pigeon (v21.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#include "pigeon.g.h"

struct _MaplibreMessageData {
  GObject parent_instance;

  gchar* name;
  gchar* description;
  MaplibreCode code;
  FlValue* data;
};

G_DEFINE_TYPE(MaplibreMessageData, maplibre_message_data, G_TYPE_OBJECT)

static void maplibre_message_data_dispose(GObject* object) {
  MaplibreMessageData* self = MAPLIBRE_MESSAGE_DATA(object);
  g_clear_pointer(&self->name, g_free);
  g_clear_pointer(&self->description, g_free);
  g_clear_pointer(&self->data, fl_value_unref);
  G_OBJECT_CLASS(maplibre_message_data_parent_class)->dispose(object);
}

static void maplibre_message_data_init(MaplibreMessageData* self) {
}

static void maplibre_message_data_class_init(MaplibreMessageDataClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_message_data_dispose;
}

MaplibreMessageData* maplibre_message_data_new(const gchar* name, const gchar* description, MaplibreCode code, FlValue* data) {
  MaplibreMessageData* self = MAPLIBRE_MESSAGE_DATA(g_object_new(maplibre_message_data_get_type(), nullptr));
  if (name != nullptr) {
    self->name = g_strdup(name);
  }
  else {
    self->name = nullptr;
  }
  if (description != nullptr) {
    self->description = g_strdup(description);
  }
  else {
    self->description = nullptr;
  }
  self->code = code;
  self->data = fl_value_ref(data);
  return self;
}

const gchar* maplibre_message_data_get_name(MaplibreMessageData* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MESSAGE_DATA(self), nullptr);
  return self->name;
}

const gchar* maplibre_message_data_get_description(MaplibreMessageData* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MESSAGE_DATA(self), nullptr);
  return self->description;
}

MaplibreCode maplibre_message_data_get_code(MaplibreMessageData* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MESSAGE_DATA(self), static_cast<MaplibreCode>(0));
  return self->code;
}

FlValue* maplibre_message_data_get_data(MaplibreMessageData* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MESSAGE_DATA(self), nullptr);
  return self->data;
}

static FlValue* maplibre_message_data_to_list(MaplibreMessageData* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, self->name != nullptr ? fl_value_new_string(self->name) : fl_value_new_null());
  fl_value_append_take(values, self->description != nullptr ? fl_value_new_string(self->description) : fl_value_new_null());
  fl_value_append_take(values, fl_value_new_custom(130, fl_value_new_int(self->code), (GDestroyNotify)fl_value_unref));
  fl_value_append_take(values, fl_value_ref(self->data));
  return values;
}

static MaplibreMessageData* maplibre_message_data_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  const gchar* name = nullptr;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    name = fl_value_get_string(value0);
  }
  FlValue* value1 = fl_value_get_list_value(values, 1);
  const gchar* description = nullptr;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    description = fl_value_get_string(value1);
  }
  FlValue* value2 = fl_value_get_list_value(values, 2);
  MaplibreCode code = static_cast<MaplibreCode>(fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(fl_value_get_custom_value(value2)))));
  FlValue* value3 = fl_value_get_list_value(values, 3);
  FlValue* data = value3;
  return maplibre_message_data_new(name, description, code, data);
}

G_DECLARE_FINAL_TYPE(MaplibreMessageCodec, maplibre_message_codec, MAPLIBRE, MESSAGE_CODEC, FlStandardMessageCodec)

struct _MaplibreMessageCodec {
  FlStandardMessageCodec parent_instance;

};

G_DEFINE_TYPE(MaplibreMessageCodec, maplibre_message_codec, fl_standard_message_codec_get_type())

static gboolean maplibre_message_codec_write_maplibre_message_data(FlStandardMessageCodec* codec, GByteArray* buffer, MaplibreMessageData* value, GError** error) {
  uint8_t type = 129;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = maplibre_message_data_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean maplibre_message_codec_write_maplibre_code(FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value, GError** error) {
  uint8_t type = 130;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  return fl_standard_message_codec_write_value(codec, buffer, value, error);
}

static gboolean maplibre_message_codec_write_value(FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value, GError** error) {
  if (fl_value_get_type(value) == FL_VALUE_TYPE_CUSTOM) {
    switch (fl_value_get_custom_type(value)) {
      case 129:
        return maplibre_message_codec_write_maplibre_message_data(codec, buffer, MAPLIBRE_MESSAGE_DATA(fl_value_get_custom_value_object(value)), error);
      case 130:
        return maplibre_message_codec_write_maplibre_code(codec, buffer, reinterpret_cast<FlValue*>(const_cast<gpointer>(fl_value_get_custom_value(value))), error);
    }
  }

  return FL_STANDARD_MESSAGE_CODEC_CLASS(maplibre_message_codec_parent_class)->write_value(codec, buffer, value, error);
}

static FlValue* maplibre_message_codec_read_maplibre_message_data(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  g_autoptr(FlValue) values = fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(MaplibreMessageData) value = maplibre_message_data_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED, "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(129, G_OBJECT(value));
}

static FlValue* maplibre_message_codec_read_maplibre_code(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  return fl_value_new_custom(130, fl_standard_message_codec_read_value(codec, buffer, offset, error), (GDestroyNotify)fl_value_unref);
}

static FlValue* maplibre_message_codec_read_value_of_type(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, int type, GError** error) {
  switch (type) {
    case 129:
      return maplibre_message_codec_read_maplibre_message_data(codec, buffer, offset, error);
    case 130:
      return maplibre_message_codec_read_maplibre_code(codec, buffer, offset, error);
    default:
      return FL_STANDARD_MESSAGE_CODEC_CLASS(maplibre_message_codec_parent_class)->read_value_of_type(codec, buffer, offset, type, error);
  }
}

static void maplibre_message_codec_init(MaplibreMessageCodec* self) {
}

static void maplibre_message_codec_class_init(MaplibreMessageCodecClass* klass) {
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->write_value = maplibre_message_codec_write_value;
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->read_value_of_type = maplibre_message_codec_read_value_of_type;
}

static MaplibreMessageCodec* maplibre_message_codec_new() {
  MaplibreMessageCodec* self = MAPLIBRE_MESSAGE_CODEC(g_object_new(maplibre_message_codec_get_type(), nullptr));
  return self;
}

struct _MaplibreExampleHostApiResponseHandle {
  GObject parent_instance;

  FlBasicMessageChannel* channel;
  FlBasicMessageChannelResponseHandle* response_handle;
};

G_DEFINE_TYPE(MaplibreExampleHostApiResponseHandle, maplibre_example_host_api_response_handle, G_TYPE_OBJECT)

static void maplibre_example_host_api_response_handle_dispose(GObject* object) {
  MaplibreExampleHostApiResponseHandle* self = MAPLIBRE_EXAMPLE_HOST_API_RESPONSE_HANDLE(object);
  g_clear_object(&self->channel);
  g_clear_object(&self->response_handle);
  G_OBJECT_CLASS(maplibre_example_host_api_response_handle_parent_class)->dispose(object);
}

static void maplibre_example_host_api_response_handle_init(MaplibreExampleHostApiResponseHandle* self) {
}

static void maplibre_example_host_api_response_handle_class_init(MaplibreExampleHostApiResponseHandleClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_example_host_api_response_handle_dispose;
}

static MaplibreExampleHostApiResponseHandle* maplibre_example_host_api_response_handle_new(FlBasicMessageChannel* channel, FlBasicMessageChannelResponseHandle* response_handle) {
  MaplibreExampleHostApiResponseHandle* self = MAPLIBRE_EXAMPLE_HOST_API_RESPONSE_HANDLE(g_object_new(maplibre_example_host_api_response_handle_get_type(), nullptr));
  self->channel = FL_BASIC_MESSAGE_CHANNEL(g_object_ref(channel));
  self->response_handle = FL_BASIC_MESSAGE_CHANNEL_RESPONSE_HANDLE(g_object_ref(response_handle));
  return self;
}

struct _MaplibreExampleHostApiGetHostLanguageResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreExampleHostApiGetHostLanguageResponse, maplibre_example_host_api_get_host_language_response, G_TYPE_OBJECT)

static void maplibre_example_host_api_get_host_language_response_dispose(GObject* object) {
  MaplibreExampleHostApiGetHostLanguageResponse* self = MAPLIBRE_EXAMPLE_HOST_API_GET_HOST_LANGUAGE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_example_host_api_get_host_language_response_parent_class)->dispose(object);
}

static void maplibre_example_host_api_get_host_language_response_init(MaplibreExampleHostApiGetHostLanguageResponse* self) {
}

static void maplibre_example_host_api_get_host_language_response_class_init(MaplibreExampleHostApiGetHostLanguageResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_example_host_api_get_host_language_response_dispose;
}

MaplibreExampleHostApiGetHostLanguageResponse* maplibre_example_host_api_get_host_language_response_new(const gchar* return_value) {
  MaplibreExampleHostApiGetHostLanguageResponse* self = MAPLIBRE_EXAMPLE_HOST_API_GET_HOST_LANGUAGE_RESPONSE(g_object_new(maplibre_example_host_api_get_host_language_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

MaplibreExampleHostApiGetHostLanguageResponse* maplibre_example_host_api_get_host_language_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreExampleHostApiGetHostLanguageResponse* self = MAPLIBRE_EXAMPLE_HOST_API_GET_HOST_LANGUAGE_RESPONSE(g_object_new(maplibre_example_host_api_get_host_language_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _MaplibreExampleHostApiAddResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreExampleHostApiAddResponse, maplibre_example_host_api_add_response, G_TYPE_OBJECT)

static void maplibre_example_host_api_add_response_dispose(GObject* object) {
  MaplibreExampleHostApiAddResponse* self = MAPLIBRE_EXAMPLE_HOST_API_ADD_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_example_host_api_add_response_parent_class)->dispose(object);
}

static void maplibre_example_host_api_add_response_init(MaplibreExampleHostApiAddResponse* self) {
}

static void maplibre_example_host_api_add_response_class_init(MaplibreExampleHostApiAddResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_example_host_api_add_response_dispose;
}

MaplibreExampleHostApiAddResponse* maplibre_example_host_api_add_response_new(int64_t return_value) {
  MaplibreExampleHostApiAddResponse* self = MAPLIBRE_EXAMPLE_HOST_API_ADD_RESPONSE(g_object_new(maplibre_example_host_api_add_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

MaplibreExampleHostApiAddResponse* maplibre_example_host_api_add_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreExampleHostApiAddResponse* self = MAPLIBRE_EXAMPLE_HOST_API_ADD_RESPONSE(g_object_new(maplibre_example_host_api_add_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreExampleHostApiSendMessageResponse, maplibre_example_host_api_send_message_response, MAPLIBRE, EXAMPLE_HOST_API_SEND_MESSAGE_RESPONSE, GObject)

struct _MaplibreExampleHostApiSendMessageResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreExampleHostApiSendMessageResponse, maplibre_example_host_api_send_message_response, G_TYPE_OBJECT)

static void maplibre_example_host_api_send_message_response_dispose(GObject* object) {
  MaplibreExampleHostApiSendMessageResponse* self = MAPLIBRE_EXAMPLE_HOST_API_SEND_MESSAGE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_example_host_api_send_message_response_parent_class)->dispose(object);
}

static void maplibre_example_host_api_send_message_response_init(MaplibreExampleHostApiSendMessageResponse* self) {
}

static void maplibre_example_host_api_send_message_response_class_init(MaplibreExampleHostApiSendMessageResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_example_host_api_send_message_response_dispose;
}

static MaplibreExampleHostApiSendMessageResponse* maplibre_example_host_api_send_message_response_new(gboolean return_value) {
  MaplibreExampleHostApiSendMessageResponse* self = MAPLIBRE_EXAMPLE_HOST_API_SEND_MESSAGE_RESPONSE(g_object_new(maplibre_example_host_api_send_message_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

static MaplibreExampleHostApiSendMessageResponse* maplibre_example_host_api_send_message_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreExampleHostApiSendMessageResponse* self = MAPLIBRE_EXAMPLE_HOST_API_SEND_MESSAGE_RESPONSE(g_object_new(maplibre_example_host_api_send_message_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreExampleHostApi, maplibre_example_host_api, MAPLIBRE, EXAMPLE_HOST_API, GObject)

struct _MaplibreExampleHostApi {
  GObject parent_instance;

  const MaplibreExampleHostApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;
};

G_DEFINE_TYPE(MaplibreExampleHostApi, maplibre_example_host_api, G_TYPE_OBJECT)

static void maplibre_example_host_api_dispose(GObject* object) {
  MaplibreExampleHostApi* self = MAPLIBRE_EXAMPLE_HOST_API(object);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;
  G_OBJECT_CLASS(maplibre_example_host_api_parent_class)->dispose(object);
}

static void maplibre_example_host_api_init(MaplibreExampleHostApi* self) {
}

static void maplibre_example_host_api_class_init(MaplibreExampleHostApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_example_host_api_dispose;
}

static MaplibreExampleHostApi* maplibre_example_host_api_new(const MaplibreExampleHostApiVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  MaplibreExampleHostApi* self = MAPLIBRE_EXAMPLE_HOST_API(g_object_new(maplibre_example_host_api_get_type(), nullptr));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;
  return self;
}

static void maplibre_example_host_api_get_host_language_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreExampleHostApi* self = MAPLIBRE_EXAMPLE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->get_host_language == nullptr) {
    return;
  }

  g_autoptr(MaplibreExampleHostApiGetHostLanguageResponse) response = self->vtable->get_host_language(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "ExampleHostApi", "getHostLanguage");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "ExampleHostApi", "getHostLanguage", error->message);
  }
}

static void maplibre_example_host_api_add_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreExampleHostApi* self = MAPLIBRE_EXAMPLE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t a = fl_value_get_int(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  int64_t b = fl_value_get_int(value1);
  g_autoptr(MaplibreExampleHostApiAddResponse) response = self->vtable->add(a, b, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "ExampleHostApi", "add");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "ExampleHostApi", "add", error->message);
  }
}

static void maplibre_example_host_api_send_message_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreExampleHostApi* self = MAPLIBRE_EXAMPLE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->send_message == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  MaplibreMessageData* message = MAPLIBRE_MESSAGE_DATA(fl_value_get_custom_value_object(value0));
  g_autoptr(MaplibreExampleHostApiResponseHandle) handle = maplibre_example_host_api_response_handle_new(channel, response_handle);
  self->vtable->send_message(message, handle, self->user_data);
}

void maplibre_example_host_api_set_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix, const MaplibreExampleHostApiVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  g_autoptr(MaplibreExampleHostApi) api_data = maplibre_example_host_api_new(vtable, user_data, user_data_free_func);

  g_autoptr(MaplibreMessageCodec) codec = maplibre_message_codec_new();
  g_autofree gchar* get_host_language_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.ExampleHostApi.getHostLanguage%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) get_host_language_channel = fl_basic_message_channel_new(messenger, get_host_language_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(get_host_language_channel, maplibre_example_host_api_get_host_language_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.ExampleHostApi.add%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_channel = fl_basic_message_channel_new(messenger, add_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_channel, maplibre_example_host_api_add_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* send_message_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.ExampleHostApi.sendMessage%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) send_message_channel = fl_basic_message_channel_new(messenger, send_message_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(send_message_channel, maplibre_example_host_api_send_message_cb, g_object_ref(api_data), g_object_unref);
}

void maplibre_example_host_api_clear_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");

  g_autoptr(MaplibreMessageCodec) codec = maplibre_message_codec_new();
  g_autofree gchar* get_host_language_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.ExampleHostApi.getHostLanguage%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) get_host_language_channel = fl_basic_message_channel_new(messenger, get_host_language_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(get_host_language_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.ExampleHostApi.add%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_channel = fl_basic_message_channel_new(messenger, add_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* send_message_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.ExampleHostApi.sendMessage%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) send_message_channel = fl_basic_message_channel_new(messenger, send_message_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(send_message_channel, nullptr, nullptr, nullptr);
}

void maplibre_example_host_api_respond_send_message(MaplibreExampleHostApiResponseHandle* response_handle, gboolean return_value) {
  g_autoptr(MaplibreExampleHostApiSendMessageResponse) response = maplibre_example_host_api_send_message_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "ExampleHostApi", "sendMessage", error->message);
  }
}

void maplibre_example_host_api_respond_error_send_message(MaplibreExampleHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreExampleHostApiSendMessageResponse) response = maplibre_example_host_api_send_message_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "ExampleHostApi", "sendMessage", error->message);
  }
}
